// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20221209091841_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "John",
                            LastName = "Jackson"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Jesse",
                            LastName = "Cailari"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Patients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(2003, 12, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            FirstName = "Vlad",
                            LastName = "Zahriichuk"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(2003, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            FirstName = "Vitalii",
                            LastName = "Havryliuk"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(2000, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            FirstName = "Nyx",
                            LastName = "Ting"
                        },
                        new
                        {
                            Id = 4,
                            DateOfBirth = new DateTime(1995, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            FirstName = "Andrii",
                            LastName = "Vytak"
                        },
                        new
                        {
                            Id = 5,
                            DateOfBirth = new DateTime(1990, 8, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            FirstName = "Bohdan",
                            LastName = "Balytskii"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SicknessHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("SicknessHistories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 9, 12, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Headache",
                            DoctorId = 2,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 10, 3, 22, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Tsyroz",
                            DoctorId = 1,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 7, 21, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Strange thing",
                            DoctorId = 2,
                            PatientId = 3
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 11, 13, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Insomnia",
                            DoctorId = 2,
                            PatientId = 4
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 10, 5, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Broken arm",
                            DoctorId = 1,
                            PatientId = 5
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Entities.SicknessHistory", b =>
                {
                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("SicknessHistories")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("SicknessHistories")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("SicknessHistories");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("SicknessHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
